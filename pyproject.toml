[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "markovian-musical-composition"
dynamic = ["version"]
description = "Advanced musical composition system based on Markov Chains with multiple synthesis methods"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Markovian Musical Composition Team", email = "contact@markovian-music.org"}
]
maintainers = [
    {name = "Markovian Musical Composition Team", email = "contact@markovian-music.org"}
]
keywords = [
    "audio", "music", "composition", "markov", "chains", "synthesis", 
    "granular", "spectral", "concatenative", "machine-learning"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "librosa>=0.8.1",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
    "soundfile>=0.10.0",
    "pandas>=1.3.0",
    "networkx>=2.6",
]

[project.optional-dependencies]
streamlit = [
    "streamlit>=1.28.0",
]
desktop = [
    "pygame>=2.1.0",
]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.12",
    "black>=21.0",
    "flake8>=3.9",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=0.5",
    "myst-parser>=0.15",
]
all = [
    "markovian-musical-composition[streamlit,desktop,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/yourusername/markovian-musical-composition"
Repository = "https://github.com/yourusername/markovian-musical-composition"
Documentation = "https://github.com/yourusername/markovian-musical-composition/blob/main/API_DOCUMENTATION.md"
"Bug Tracker" = "https://github.com/yourusername/markovian-musical-composition/issues"
Changelog = "https://github.com/yourusername/markovian-musical-composition/blob/main/CHANGELOG.md"

[project.scripts]
markovian-desktop = "audioMarkov_gui_VFrame:main"
markovian-streamlit = "markov_audio_streamlit:main"
markovian-batch = "scripts.batch_process:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["markovian_musical_composition"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]