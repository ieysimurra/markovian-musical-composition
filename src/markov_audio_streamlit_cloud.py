#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Sistema de Composi√ß√£o Musical baseado em Cadeias de Markov
Interface Streamlit otimizada para Streamlit Cloud
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import zipfile
import time
import tempfile
import os
from typing import List, Dict, Optional, Union, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import random

# Configura√ß√£o inicial
st.set_page_config(
    page_title="Sistema de Composi√ß√£o Musical Markoviano",
    page_icon="üéµ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Imports condicionais com fallbacks
try:
    import librosa
    import librosa.display
    LIBROSA_AVAILABLE = True
except ImportError:
    st.error("Librosa n√£o est√° dispon√≠vel. Algumas funcionalidades podem estar limitadas.")
    LIBROSA_AVAILABLE = False

try:
    import soundfile as sf
    SOUNDFILE_AVAILABLE = True
except ImportError:
    st.error("SoundFile n√£o est√° dispon√≠vel. Export de √°udio pode estar limitado.")
    SOUNDFILE_AVAILABLE = False

try:
    from sklearn.cluster import KMeans
    from sklearn.preprocessing import StandardScaler
    from sklearn.decomposition import PCA
    from sklearn.metrics import silhouette_score
    SKLEARN_AVAILABLE = True
except ImportError:
    st.error("Scikit-learn n√£o est√° dispon√≠vel. An√°lise pode estar limitada.")
    SKLEARN_AVAILABLE = False

try:
    from scipy import signal
    from scipy.stats import skew, kurtosis
    SCIPY_AVAILABLE = True
except ImportError:
    st.error("SciPy n√£o est√° dispon√≠vel. Algumas an√°lises podem estar limitadas.")
    SCIPY_AVAILABLE = False

# Configura√ß√µes
import warnings
warnings.filterwarnings('ignore')
sns.set_theme()

# Classes e Enums
class WindowType(Enum):
    HANN = 'hann'
    HAMMING = 'hamming'
    BLACKMAN = 'blackman'
    GAUSSIAN = 'gaussian'
    KAISER = 'kaiser'
    RECTANGULAR = 'rectangular'

class SynthesisType(Enum):
    CONCATENATIVE = 'concatenative'
    GRANULAR = 'granular'
    SPECTRAL = 'spectral'

class DurationMode(Enum):
    FIXED = 'fixed'
    CLUSTER_MEAN = 'cluster_mean'
    SEQUENCE_LENGTH = 'sequence'

@dataclass
class AudioData:
    filename: str
    signal: np.ndarray
    sr: int
    features: Optional[np.ndarray] = field(default=None)
    labels: Optional[np.ndarray] = field(default=None)

    def __post_init__(self):
        if not isinstance(self.signal, np.ndarray):
            self.signal = np.array(self.signal)
        if len(self.signal.shape) > 1:
            self.signal = np.mean(self.signal, axis=1)

# Verifica√ß√£o de depend√™ncias
def check_dependencies():
    """Verifica se todas as depend√™ncias necess√°rias est√£o dispon√≠veis."""
    missing = []
    if not LIBROSA_AVAILABLE:
        missing.append("librosa")
    if not SOUNDFILE_AVAILABLE:
        missing.append("soundfile")
    if not SKLEARN_AVAILABLE:
        missing.append("scikit-learn")
    if not SCIPY_AVAILABLE:
        missing.append("scipy")
    
    return missing

# Interface principal
def main():
    st.title("üéµ Sistema de Composi√ß√£o Musical baseado em Cadeias de Markov")
    st.markdown("---")
    
    # Verificar depend√™ncias
    missing_deps = check_dependencies()
    if missing_deps:
        st.error(f"Depend√™ncias faltando: {', '.join(missing_deps)}")
        st.info("Algumas funcionalidades podem estar limitadas.")
        st.markdown("**Para funcionalidade completa, instale as depend√™ncias:**")
        st.code(f"pip install {' '.join(missing_deps)}")
        st.markdown("---")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Upload de arquivos
        st.subheader("üìÅ Upload de Arquivos")
        uploaded_files = st.file_uploader(
            "Selecione os arquivos de √°udio",
            type=['wav', 'mp3', 'flac', 'ogg', 'aiff', 'aif'],
            accept_multiple_files=True,
            help="Formatos suportados: WAV, MP3, FLAC, OGG, AIFF"
        )
        
        # Par√¢metros de an√°lise
        st.subheader("üîç Par√¢metros de An√°lise")
        window_length_ms = st.slider(
            "Tamanho da janela (ms)",
            min_value=100,
            max_value=1000,
            value=500,
            step=50,
            help="Tamanho da janela de an√°lise em milissegundos"
        )
        
        cluster_mode = st.radio(
            "Modo de clustering",
            ["Autom√°tico", "Manual"],
            help="Detec√ß√£o autom√°tica ou defini√ß√£o manual do n√∫mero de clusters"
        )
        
        if cluster_mode == "Manual":
            k_clusters = st.slider(
                "N√∫mero de clusters",
                min_value=2,
                max_value=20,
                value=5,
                help="N√∫mero de clusters para K-means"
            )
        else:
            k_clusters = None
    
    # √Årea principal
    if uploaded_files:
        st.success(f"‚úÖ {len(uploaded_files)} arquivo(s) carregado(s)")
        
        # Mostrar informa√ß√µes dos arquivos
        with st.expander("üìã Informa√ß√µes dos Arquivos"):
            for i, file in enumerate(uploaded_files):
                st.write(f"**{i+1}.** {file.name} ({file.size} bytes)")
        
        # Bot√£o para iniciar an√°lise
        if st.button("üöÄ Iniciar An√°lise", type="primary"):
            if not LIBROSA_AVAILABLE or not SKLEARN_AVAILABLE:
                st.error("Depend√™ncias necess√°rias n√£o est√£o dispon√≠veis para an√°lise.")
                return
                
            try:
                with st.spinner("Analisando arquivos de √°udio..."):
                    # An√°lise simplificada para demonstra√ß√£o
                    st.info("An√°lise em modo demonstra√ß√£o...")
                    
                    # Simular progresso
                    progress_bar = st.progress(0)
                    for i in range(100):
                        time.sleep(0.01)
                        progress_bar.progress(i + 1)
                    
                    # Resultados simulados
                    num_clusters = k_clusters if k_clusters else np.random.randint(3, 8)
                    
                st.success("‚úÖ An√°lise conclu√≠da com sucesso!")
                
                # Exibir informa√ß√µes da an√°lise
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Arquivos processados", len(uploaded_files))
                with col2:
                    st.metric("Clusters encontrados", num_clusters)
                with col3:
                    st.metric("Caracter√≠sticas extra√≠das", "Simulado")
                
                # Interface de gera√ß√£o
                st.markdown("---")
                st.header("üéº Configura√ß√µes de Gera√ß√£o")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä Par√¢metros B√°sicos")
                    num_tracks = st.slider("N√∫mero de tracks", 1, 10, 3)
                    duration_seconds = st.slider("Dura√ß√£o (segundos)", 10, 300, 60)
                    
                    synthesis_type_str = st.selectbox(
                        "Tipo de s√≠ntese",
                        ["Concatenative", "Granular", "Spectral"],
                        help="M√©todo de s√≠ntese de √°udio"
                    )
                    
                    duration_mode_str = st.selectbox(
                        "Modo de dura√ß√£o",
                        ["Fixa", "M√©dia do cluster", "Sequ√™ncia"],
                        help="Como controlar a dura√ß√£o dos segmentos"
                    )
                
                with col2:
                    st.subheader("üéõÔ∏è Par√¢metros de S√≠ntese")
                    
                    if synthesis_type_str == "Concatenative":
                        crossfade_duration = st.slider(
                            "Dura√ß√£o do crossfade (s)", 0.01, 0.5, 0.1, 0.01
                        )
                        synthesis_params = {'crossfade_duration': crossfade_duration}
                        
                    elif synthesis_type_str == "Granular":
                        grain_size = st.slider("Tamanho do gr√£o (s)", 0.01, 0.5, 0.1, 0.01)
                        density = st.slider("Densidade (gr√£os/s)", 10, 500, 100, 10)
                        pitch_shift = st.slider("Mudan√ßa de pitch (semitons)", -12, 12, 0)
                        synthesis_params = {
                            'grain_size': grain_size,
                            'density': density,
                            'pitch_shift': pitch_shift
                        }
                        
                    elif synthesis_type_str == "Spectral":
                        preserve_transients = st.checkbox("Preservar transientes", True)
                        spectral_stretch = st.slider("Fator de esticamento", 0.1, 3.0, 1.0, 0.1)
                        fft_size = st.selectbox("Tamanho da FFT", [512, 1024, 2048, 4096], index=2)
                        synthesis_params = {
                            'preserve_transients': preserve_transients,
                            'spectral_stretch': spectral_stretch,
                            'fft_size': fft_size
                        }
                
                # Bot√£o para gerar tracks
                if st.button("üéµ Gerar Composi√ß√£o", type="primary"):
                    try:
                        with st.spinner("Gerando composi√ß√£o..."):
                            # Simula√ß√£o de gera√ß√£o
                            progress_bar = st.progress(0)
                            for i in range(100):
                                time.sleep(0.02)
                                progress_bar.progress(i + 1)
                        
                        st.success("‚úÖ Composi√ß√£o gerada com sucesso!")
                        
                        # Interface de reprodu√ß√£o simulada
                        st.markdown("---")
                        st.header("üéß Reprodu√ß√£o e Download")
                        
                        # Simula√ß√£o de arquivos gerados
                        for i in range(num_tracks):
                            st.subheader(f"üéµ Track {i+1}")
                            
                            # Audio player simulado
                            st.info(f"Track {i+1} - {synthesis_type_str} - {duration_seconds}s")
                            
                            # Criar dados de √°udio simulados
                            sample_rate = 44100
                            duration = 5  # 5 segundos para demonstra√ß√£o
                            t = np.linspace(0, duration, int(sample_rate * duration), False)
                            
                            # Gerar onda senoidal simples
                            frequency = 220 * (i + 1)  # Frequ√™ncias diferentes para cada track
                            audio_data = 0.3 * np.sin(2 * np.pi * frequency * t)
                            
                            # Exibir player de √°udio
                            if SOUNDFILE_AVAILABLE:
                                # Salvar √°udio tempor√°rio
                                with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                                    sf.write(tmp_file.name, audio_data, sample_rate)
                                    with open(tmp_file.name, 'rb') as f:
                                        st.audio(f.read(), format='audio/wav')
                                    os.unlink(tmp_file.name)
                            else:
                                st.info("Player de √°udio n√£o dispon√≠vel (SoundFile necess√°rio)")
                        
                        # Mix final simulado
                        st.subheader("üéº Mix Final")
                        if SOUNDFILE_AVAILABLE:
                            # Criar mix combinado
                            combined_audio = np.zeros_like(audio_data)
                            for i in range(num_tracks):
                                freq = 220 * (i + 1)
                                track_audio = 0.1 * np.sin(2 * np.pi * freq * t)
                                combined_audio += track_audio
                            
                            # Normalizar
                            if np.max(np.abs(combined_audio)) > 0:
                                combined_audio = combined_audio / np.max(np.abs(combined_audio))
                            
                            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                                sf.write(tmp_file.name, combined_audio, sample_rate)
                                with open(tmp_file.name, 'rb') as f:
                                    st.audio(f.read(), format='audio/wav')
                                os.unlink(tmp_file.name)
                        
                        # Bot√£o de download simulado
                        st.download_button(
                            label="üì• Download Composi√ß√£o (Simulado)",
                            data="Dados da composi√ß√£o seriam inclu√≠dos aqui",
                            file_name=f"markov_composition_{int(time.time())}.zip",
                            mime="application/zip"
                        )
                        
                    except Exception as e:
                        st.error(f"‚ùå Erro durante a gera√ß√£o: {str(e)}")
                
            except Exception as e:
                st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
    
    else:
        # Instru√ß√µes para o usu√°rio
        st.info("üëÜ Carregue arquivos de √°udio na barra lateral para come√ßar")
        
        # Informa√ß√µes sobre o sistema
        with st.expander("‚ÑπÔ∏è Sobre o Sistema"):
            st.markdown("""
            Este sistema utiliza **Cadeias de Markov** para an√°lise e gera√ß√£o de material sonoro.
            
            **Como funciona:**
            1. **An√°lise**: Os arquivos de √°udio s√£o segmentados e suas caracter√≠sticas s√£o extra√≠das
            2. **Clustering**: As caracter√≠sticas s√£o agrupadas usando K-means
            3. **Modelagem**: Uma cadeia de Markov √© constru√≠da baseada nas transi√ß√µes entre clusters
            4. **Gera√ß√£o**: Novas sequ√™ncias s√£o geradas e sintetizadas usando diferentes m√©todos
            
            **Tipos de S√≠ntese:**
            - **Concatenativa**: Une segmentos com crossfade
            - **Granular**: S√≠ntese baseada em gr√£os sonoros
            - **Espectral**: Manipula√ß√£o no dom√≠nio da frequ√™ncia
            
            **Nota**: Esta √© uma vers√£o otimizada para Streamlit Cloud com funcionalidades simuladas.
            Para funcionalidade completa, execute localmente com todas as depend√™ncias instaladas.
            """)

if __name__ == "__main__":
    main()